{"version":3,"sources":["API-KEY.js","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["API_KEY","Weather","props","componentDidUpdate","prevProps","coords","fetch","latitude","longitude","then","res","json","result","setState","isLoaded","resultData","error","calculateTemperature","state","main","temp","this","console","log","className","name","color","icon","autoplay","toFixed","weather","description","toUpperCase","PureComponent","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAAaA,EAAU,mCCKjBC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,mBAAqB,SAAAC,GAAc,IAC3BC,EAAW,EAAKH,MAAhBG,OACF,EAAKH,MAAMG,SAAWD,EAAUC,QAClCC,MAAM,sDAAD,OAAuDD,GAC1DA,EAAOE,SADJ,gBACoBF,GAAUA,EAAOG,UADrC,kBACwDR,IAC1DS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZC,UAAU,EACVC,WAAYH,OAGd,SAACI,GACC,EAAKH,SAAS,CACZC,UAAU,EACVE,cAxBO,EA+BnBC,qBAAuB,WAAO,IACpBF,EAAe,EAAKG,MAApBH,WAMR,OAJqBA,GAAcA,EAAWI,MAAQJ,EAAWI,KAAKC,MAEjC,QAlCrC,EAAKF,MAAQ,CACXF,MAAO,KACPF,UAAU,EACVC,WAAY,IALG,E,sEA0CT,IAAD,EAC0BM,KAAKH,MAA9BH,EADD,EACCA,WAAYD,EADb,EACaA,SAGpB,OAFAQ,QAAQC,IAAIR,EAAY,SAEnBD,EAQD,yBAAKU,UAAU,aACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,eACb,6BAAK,4BAAKT,GAAcA,EAAWU,OACnC,6BACE,kBAAC,IAAD,CACEC,MAAM,QACNC,KAAK,oBACLC,UAAU,MAIhB,yBAAKJ,UAAU,YACb,4BAAKH,KAAKJ,uBAAuBY,QAAQ,GAAzC,OAEF,yBAAKL,UAAU,YACb,6BAAMT,GAAcA,EAAWe,SAAWf,EAAWe,QAAQ,GAAGC,aAAaC,kBAtBnF,yBAAKR,UAAU,aACb,+C,GAlDYS,iBAgFPC,uBAAW,CACxBC,gBAAiB,CACfC,oBAAoB,GAEtBC,oBAAqB,KAJRH,CAKZjC,GC7EYqC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.e0debe40.chunk.js","sourcesContent":["export const API_KEY = '7df65df52a9b0e808273021697f44b36';","import React, { PureComponent } from 'react';\nimport Skycons from 'react-skycons';\nimport { geolocated } from \"react-geolocated\";\nimport { API_KEY } from '../API-KEY';\n\nclass Weather extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      resultData: {}\n    }\n  }\n\n  componentDidUpdate = prevProps => {\n    let { coords } = this.props;\n    if (this.props.coords !== prevProps.coords) {\n      fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${coords &&\n        coords.latitude}&lon=${coords && coords.longitude}&APPID=${API_KEY}`)\n        .then((res) => res.json())\n        .then((result) => {\n          this.setState({\n            isLoaded: true,\n            resultData: result\n          })\n        },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            })\n          }\n        )\n    }\n  }\n\n  calculateTemperature = () => {\n    const { resultData } = this.state;\n\n    const tempInKelvin = resultData && resultData.main && resultData.main.temp;\n\n    const tempInCelcius = tempInKelvin - 273.15;\n\n    return tempInCelcius;\n  }\n\n\n  render() {\n    const { resultData, isLoaded } = this.state;\n    console.log(resultData, \"<====\");\n\n    if (!isLoaded) {\n      return (\n        <div className=\"container\">\n          <h3>Loading...</h3>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"container\">\n          <div className=\"inner-container\">\n            <div className=\"top-weather\">\n              <div><h2>{resultData && resultData.name}</h2></div>\n              <div>\n                <Skycons\n                  color='white'\n                  icon='PARTLY_CLOUDY_DAY'\n                  autoplay={true}\n                />\n              </div>\n            </div>\n            <div className=\"centered\">\n              <h1>{this.calculateTemperature().toFixed(2)} C</h1>\n            </div>\n            <div className=\"centered\">\n              <h2>{(resultData && resultData.weather && resultData.weather[0].description).toUpperCase()}</h2>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: true\n  },\n  userDecisionTimeout: 5000\n})(Weather);","import React from 'react';\n\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}